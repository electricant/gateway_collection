#
# Networking related tweaks
#

# Increase the maximum number of connections handled by the kernel
# (default 128)
net.core.somaxconn = 256

# The default the Linux network stack is not configured for high speed large
# file transfer across WAN links (i.e. handle more network packets) and setting
# the correct values may save memory resources
net.core.rmem_default = 1048576
net.core.rmem_max = 16777216
net.core.wmem_default = 1048576
net.core.wmem_max = 16777216
net.core.optmem_max = 65536
net.ipv4.tcp_rmem = 4096 1048576 2097152
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192

# TCP Fast Open is an extension to the transmission control protocol (TCP) that
# helps reduce network latency by enabling data to be exchanged during the
# sender's initial TCP SYN. Using the value 3 instead of the default 1 allows
# TCP Fast Open for both incoming and outgoing connections
net.ipv4.tcp_fastopen = 3

# Make room for more TIME_WAIT sockets due to more clients, and allow them to
# be reused if we run out of sockets. Also increase the max packet backlog
net.core.netdev_max_backlog = 50000
net.ipv4.tcp_max_syn_backlog = 30000
net.ipv4.tcp_max_tw_buckets = 2000000
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 10

# Disable TCP slow start on idle connections
net.ipv4.tcp_slow_start_after_idle = 0

#  TCP keepalive is a mechanism for TCP connections that help to determine
#  whether the other end has stopped responding or not.
#  TCP will send the keepalive probe contains null data to the network peer
#  several times after a period of idle time. If the peer does not respond,
#  the socket will be closed automatically.
#  With the following settings, your application will detect dead TCP
#  connections after 120 seconds (60s + 10s + 10s + 10s + 10s + 10s + 10s)
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 6

# Enable MTU probing
net.ipv4.tcp_mtu_probing = 1

# TCP/IP stack hardening
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_rfc1337 = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1

# We are a router so better accept redirects & enable forwarding
net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.all.send_redirects = 1
net.ipv6.conf.all.accept_redirects = 1
net.ipv4.conf.default.accept_redirects = 1
net.ipv4.conf.default.secure_redirects = 1
net.ipv4.conf.default.send_redirects = 1
net.ipv6.conf.default.accept_redirects = 1

# Since we are a router also ARP should be forwarded
net.ipv4.conf.all.proxy_arp=1
net.ipv4.conf.all.arp_announce = 2
net.ipv4.conf.all.arp_filter = 1
net.ipv4.conf.all.mc_forwarding=1
net.ipv4.conf.default.proxy_arp=1
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.default.arp_filter = 1
net.ipv4.conf.default.mc_forwarding=1
