# We are a router so better accept redirects & enable forwarding
net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.all.send_redirects = 1
net.ipv4.conf.default.accept_redirects = 1
net.ipv4.conf.default.secure_redirects = 1
net.ipv4.conf.default.send_redirects = 1

# Since we are a router also ARP should be forwarded
net.ipv4.conf.all.proxy_arp=1
net.ipv4.conf.all.arp_announce = 2
net.ipv4.conf.all.arp_filter = 1
net.ipv4.conf.default.proxy_arp=1
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.default.arp_filter = 1

# Do accept source routing
net.ipv4.conf.default.accept_source_route = 1
net.ipv4.conf.all.accept_source_route = 1

# Number of times SYNACKs for a passive TCP connection attempt will
# be retransmitted.
net.ipv4.tcp_synack_retries = 2                                                

# Isn't this already set by default? (better twice than never)
net.ipv4.tcp_window_scaling = 1

# Accept Redirects
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.default.accept_redirects = 1
net.ipv4.conf.default.secure_redirects = 1

# Log packets with impossible addresses to kernel log
net.ipv4.conf.all.log_martians = 1

# Ignore all ICMP ECHO and TIMESTAMP requests sent to it via broadcast/multicast
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Prevent against the common 'syn flood attack'
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_synack_retries = 5

# Enable source validation by reversed path, as specified in RFC1812
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.default.rp_filter = 2

net.ipv4.tcp_fin_timeout = 15 
net.ipv4.tcp_keepalive_time = 360 
net.ipv4.tcp_window_scaling = 1 
net.ipv4.tcp_sack = 1 
net.ipv4.tcp_fack = 1
net.ipv4.tcp_timestamps = 1 

# Buffer bloat ftl
net.ipv4.tcp_ecn=1
net.ipv4.tcp_sack=1
net.ipv4.tcp_dsack=1

# drop RST packets for sockets in the time-wait state
net.ipv4.tcp_rfc1337 = 1

# don't cache ssthresh from previous connection
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# TCP Fast Open is an extension to the transmission control protocol (TCP) that
# helps reduce network latency by enabling data to be exchanged during the
# sender's initial TCP SYN. Using the value 3 instead of the default 1 allows
# TCP Fast Open for both incoming and outgoing connections
net.ipv4.tcp_fastopen = 3

# Disable TCP slow start on idle connections
net.ipv4.tcp_slow_start_after_idle = 0

# Enable MTU probing
net.ipv4.tcp_mtu_probing = 1

# Enable low-latency busy polls to reduce network latency at the expense of
# increased CPU usage
net.core.busy_poll=50
net.core.busy_read=50

# Decrease the time default value for tcp_fin_timeout connection
net.ipv4.tcp_fin_timeout = 15

# Decrease the time default value for tcp_keepalive_time connection
net.ipv4.tcp_keepalive_time = 1800

# Enable bad error message Protection
net.ipv4.icmp_ignore_bogus_error_responses = 1

